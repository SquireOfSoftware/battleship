{"version":3,"sources":["components/gameboard/Square.js","components/gameboard/Grid.js","components/ships/Ships.js","components/gameboard/BoardType.js","components/gameboard/AttackBoard.js","components/gamemaster/WarRoom.js","components/gameboard/DeploymentCounter.js","components/gameboard/SetupBoard.js","components/gamemaster/DeploymentRoom.js","App.js","serviceWorker.js","index.js"],"names":["Square","value","this","props","className","onClick","processClick","coords","React","Component","Grid","boardSize","board","boardStyle","x","y","id","getValue","key","handleClick","style","Ships","Carrier","name","size","symbol","Battleship","Cruiser","Submarine","Destroyer","BoardType","Enemy","Player","NoOne","AttackBoard","e","isClickable","canAttack","boardType","processAttack","square","clickedSquares","state","existsInClickedSquares","push","setState","endTurn","coord","filter","length","existsOnShipPositions","ships","flatMap","ship","shipCoord","console","log","defaultProps","WarRoom","incomingBoardType","nextTurn","whosTurn","boardEventSource","enemyBoard","playerBoard","DeploymentCounter","decrementCount","event","counter","incrementCount","maxCount","reference","handleRadioSelection","link","type","htmlFor","SetupBoard","handleGridClick","canClickGrid","undefined","selectedShipType","squaresLeft","shipType","shipPlacements","radioButtons","forEach","shipReference","index","radioButton","DeploymentRoom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89402053.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Square extends React.Component {\n    render() {\n        let value = this.props.value;\n        return (\n            <div \n                className=\"default-square-element\"\n                onClick={() => this.props.processClick(this.props.coords)}\n            >\n                {value}\n            </div>\n        )\n    }\n}\n\nSquare.propTypes = {\n    processClick: PropTypes.func.isRequired,\n    coords: PropTypes.object\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport Square from './Square.js';\n\nclass Grid extends Component {\n    render() {\n        let boardSize = this.props.boardSize;\n        const board = [];\n        let boardStyle = {};\n\n        boardStyle[\"gridTemplateColumns\"] = \"repeat(\" + boardSize.x + \", 25px)\";\n        boardStyle[\"gridTemplateRows\"] = \"repeat(\" + boardSize.y + \", 25px)\";\n\n        for(let y = 0; y < boardSize.y; y++) {\n            board[y] = [];\n            for(let x = 0; x < boardSize.x; x++) {\n                let id = \"x:\" + x + \",y:\" + y;\n                let coords = {\n                    x,\n                    y\n                };\n\n                let value = this.props.getValue(coords);\n\n                board[y][x] = <Square\n                    key={id}\n                    id={id}\n                    coords={coords}\n                    value={value}\n                    processClick={this.props.handleClick}\n            />;\n            }\n        }\n\n        return (\n           <div className=\"gameboard\" style={boardStyle}>\n               {board}\n           </div>\n        )\n    }\n}\n\nexport default Grid;","const Ships = {\n    Carrier: {\n        name: \"Carrier\",\n        size: 5,\n        symbol: \"A\"\n    },\n    Battleship: {\n        name: \"Battleship\",\n        size: 4,\n        symbol: \"B\"\n    },\n    Cruiser: {\n        name: \"Cruiser\",\n        size: 3,\n        symbol: \"C\"\n    },\n    Submarine: {\n        name: \"Submarine\",\n        size: 3,\n        symbol: \"S\"\n    },\n    Destroyer: {\n        name: \"Destroyer\",\n        size: 2,\n        symbol: \"D\"\n    }\n}\n\nexport default Ships;","\nconst BoardType = {\n    Enemy: 'Enemy',\n    Player: 'Player',\n    NoOne: 'No One'\n};\n\nexport default BoardType;","import React, { Component } from 'react';\nimport Grid from './Grid.js';\nimport Ships from '../ships/Ships.js';\nimport PropTypes from 'prop-types';\nimport BoardType from './BoardType.js';\n\nclass AttackBoard extends Component {\n    constructor(props) {\n        super(props);\n\n        console.log(props);\n\n        this.state = {\n            clickedSquares: []\n        }\n    }\n\n    handleClick = (e) => {\n        if (this.props.isClickable &&\n            this.props.canAttack(this.props.boardType)) {\n            this.processAttack(e);\n        }\n    }\n\n    processAttack = (square) => {\n        let clickedSquares = this.state.clickedSquares;\n        if (!this.existsInClickedSquares(square)) {\n            clickedSquares.push(square);\n            this.setState({\n                clickedSquares\n            });\n            this.props.endTurn(this.props.boardType);\n        }\n    }\n\n    existsInClickedSquares = (coord) => {\n        return this.state.clickedSquares.filter(\n            square => square.x === coord.x &&\n                square.y === coord.y)\n            .length > 0;\n    }\n\n    existsOnShipPositions = (coord) => {\n        return this.props.ships.flatMap(ship =>  ship.coords)\n            .filter(shipCoord => shipCoord.x === coord.x &&\n                shipCoord.y === coord.y)\n            .length > 0;\n    }\n\n    getValue = (coord) => {\n        let value = \"\";\n        if (this.existsInClickedSquares(coord)) {\n            if (this.existsOnShipPositions(coord)) {\n                value = \"S\";\n            } else {\n                value = \"X\";\n            }\n        }\n        return value;\n    }\n\n    render() {\n        return (\n           <div>\n               <div className='title'>{this.props.boardType} board</div>\n               <Grid handleClick={this.handleClick}\n                     boardSize={this.props.boardSize}\n                     getValue={this.getValue}\n               />\n           </div>\n        )\n    }\n}\n\nAttackBoard.propTypes = {\n    boardSize: PropTypes.object.isRequired,\n    ships: PropTypes.array\n}\n\nAttackBoard.defaultProps = {\n    boardSize: {\n        x: 25,\n        y: 10\n    },\n    ships: [\n        {\n            name: Ships.Destroyer,\n            coords: [\n                {x: 1, y: 2},\n                {x: 2, y: 2},\n            ]\n        },\n        {\n            name: Ships.Destroyer,\n            coords: [\n                {x: 0, y: 0},\n                {x: 0, y: 1},\n            ]\n        }\n    ],\n    boardType: BoardType.Player,\n    isClickable: false\n}\n\n\nexport default AttackBoard;","import React, { Component } from 'react';\nimport AttackBoard from '../gameboard/AttackBoard.js';\nimport BoardType from '../gameboard/BoardType.js';\n\nclass WarRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        whosTurn: BoardType.Player\n    };\n  }\n\n  endTurn = (incomingBoardType) => {\n    let nextTurn;\n    switch(incomingBoardType) {\n      case BoardType.Player:\n         console.log(\"ending enemy turn!\");\n         nextTurn = BoardType.Player;\n         break;\n      case BoardType.Enemy:\n         console.log(\"ending player turn\");\n         nextTurn = BoardType.Enemy;\n         break;\n      default:\n         nextTurn = BoardType.NoOne;\n    }\n\n    this.setState({\n      whosTurn: nextTurn\n    });\n    console.log(this.state);\n  }\n\n  /*\n  This checks the incoming source of the event, different players should\n  be able to send \"seemingly\" contradictory events. A player is able to click\n  on the enemy board hence sending an event from the enemy board and vice versa\n  for the enemy.\n  */\n  canAttack = (boardEventSource) => {\n    switch(boardEventSource) {\n        case BoardType.Enemy:\n            return this.state.whosTurn === BoardType.Player;\n        case BoardType.Player:\n            return this.state.whosTurn === BoardType.Enemy;\n        default:\n            return false;\n    }\n  }\n\n  render() {\n    let enemyBoard = <AttackBoard boardType={BoardType.Enemy}\n                            endTurn={this.endTurn}\n                            canAttack={this.canAttack}\n                            isClickable='true'\n                     />\n    let playerBoard = <AttackBoard boardType={BoardType.Player}\n                            endTurn={this.endTurn}\n                            canAttack={this.canAttack}\n                            isClickable='true'\n                     />\n\n    return (\n      <div>\n        {enemyBoard}\n        {playerBoard}\n        <div className=\"turn-order\">The current turn is: {this.state.whosTurn}</div>\n      </div>\n    )\n  }\n}\n\nexport default WarRoom;\n","import React, {Component} from 'react';\n\nclass DeploymentCounter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.id = this.props.id;\n        this.link = this.props.link;\n        this.reference = this.props.reference;\n\n        this.name = this.reference.name;\n        this.value = this.reference.symbol;\n        this.counter = this.reference.size;\n    }\n\n    decrementCount = (event) => {\n        if (this.counter > -1) {\n            this.counter--;\n        } else {\n            this.counter = 0;\n        }\n    }\n\n    incrementCount = (event) => {\n        if (this.counter < this.props.maxCount) {\n            this.counter++;\n        } else {\n            this.counter = this.reference.size;\n        }\n    }\n\n    handleRadioSelection = (e) => {\n        this.props.handleRadioSelection(this.reference, this.counter);\n    }\n\n    render() {\n        return (\n            <div className=\"ship-checkbox\">\n                <input type='radio'\n                       id={this.id}\n                       name={this.link}\n                       value={this.value}\n                       onClick={this.handleRadioSelection}/>\n                <label htmlFor={this.id}>\n                       {this.name} squares left to place: {this.counter}\n                </label>\n            </div>\n        )\n    }\n}\n\nexport default DeploymentCounter;","import React, { Component } from 'react';\nimport Grid from './Grid.js';\nimport Ships from '../ships/Ships.js';\nimport DeploymentCounter from './DeploymentCounter.js'\n\nclass SetupBoard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            shipPlacements: [],\n            selectedShipType: undefined,\n            squaresLeft: 0,\n            clickedSquares: []\n        };\n    }\n\n    handleGridClick = (e) => {\n        if (this.canClickGrid()) {\n\n        }\n    }\n\n    getValue = (coords) => {\n\n    }\n\n    canClickGrid = () => {\n        return this.state.selectedShipType !== undefined &&\n            this.state.squaresLeft > 0 &&\n            this.state.squaresLeft <= this.state.selectedShipType;\n    }\n\n    handleRadioSelection = (shipType, squaresLeft) => {\n        console.log(shipType);\n        this.setState({\n            selectedShipType: shipType,\n            squaresLeft: squaresLeft\n        });\n    }\n\n    render() {\n        let shipArray = [\n            Ships.Carrier,\n            Ships.Battleship,\n            Ships.Cruiser,\n            Ships.Submarine,\n            Ships.Destroyer\n        ];\n\n        let radioButtons = [];\n\n        shipArray.forEach(\n            (shipReference, index) => {\n                let radioButton = <DeploymentCounter key={index}\n                                        id={index}\n                                        reference={shipReference}\n                                        link=\"setupBoard\"\n                                        handleRadioSelection={this.handleRadioSelection}\n                                  />\n                radioButtons.push(radioButton);\n            }\n        );\n\n        return (\n            <div>\n                <div className=\"setup-instructions\">\n                    Deploy your ships for naval warfare\n                </div>\n                <Grid handleClick={this.handleGridClick}\n                      boardSize={this.props.boardSize}\n                      getValue={this.getValue}\n                />\n                <div>\n                    {radioButtons}\n                </div>\n                <div className=\"setup-instructions\">\n                    Tip: Tap the above check boxes to place your ships\n                </div>\n            </div>\n        )\n    }\n}\n\nSetupBoard.defaultProps = {\n              boardSize: {\n                  x: 25,\n                  y: 10\n              }\n          }\n\nexport default SetupBoard;","import React, { Component } from 'react';\nimport SetupBoard from '../gameboard/SetupBoard.js';\n\nclass DeploymentRoom extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <SetupBoard />\n            </div>\n        )\n    }\n}\n\nexport default DeploymentRoom;","import React from 'react';\nimport './App.css';\nimport WarRoom from './components/gamemaster/WarRoom.js';\nimport DeploymentRoom from './components/gamemaster/DeploymentRoom.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <DeploymentRoom />\n      <WarRoom />\n      </header>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}